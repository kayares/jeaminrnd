// Generated by gencpp from file dynamixel_current_2port/RL_NeckAngleResponse.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_CURRENT_2PORT_MESSAGE_RL_NECKANGLERESPONSE_H
#define DYNAMIXEL_CURRENT_2PORT_MESSAGE_RL_NECKANGLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_current_2port
{
template <class ContainerAllocator>
struct RL_NeckAngleResponse_
{
  typedef RL_NeckAngleResponse_<ContainerAllocator> Type;

  RL_NeckAngleResponse_()
    : rl_neckangle(0.0)  {
    }
  RL_NeckAngleResponse_(const ContainerAllocator& _alloc)
    : rl_neckangle(0.0)  {
  (void)_alloc;
    }



   typedef double _rl_neckangle_type;
  _rl_neckangle_type rl_neckangle;





  typedef boost::shared_ptr< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RL_NeckAngleResponse_

typedef ::dynamixel_current_2port::RL_NeckAngleResponse_<std::allocator<void> > RL_NeckAngleResponse;

typedef boost::shared_ptr< ::dynamixel_current_2port::RL_NeckAngleResponse > RL_NeckAngleResponsePtr;
typedef boost::shared_ptr< ::dynamixel_current_2port::RL_NeckAngleResponse const> RL_NeckAngleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator1> & lhs, const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.rl_neckangle == rhs.rl_neckangle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator1> & lhs, const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_current_2port

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3f7b8005f2422d2175dbefadbd24dbc";
  }

  static const char* value(const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3f7b8005f2422d2ULL;
  static const uint64_t static_value2 = 0x175dbefadbd24dbcULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_current_2port/RL_NeckAngleResponse";
  }

  static const char* value(const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rl_neckangle\n"
;
  }

  static const char* value(const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rl_neckangle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RL_NeckAngleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_current_2port::RL_NeckAngleResponse_<ContainerAllocator>& v)
  {
    s << indent << "rl_neckangle: ";
    Printer<double>::stream(s, indent + "  ", v.rl_neckangle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_CURRENT_2PORT_MESSAGE_RL_NECKANGLERESPONSE_H
